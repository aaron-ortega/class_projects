{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns; sns.set()\n",
    "from sklearn.cluster import KMeans\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.float64(np.load('MNIST.npy')) \n",
    "labels = np.float32(np.load('MNIST_labels.npy'))\n",
    "data /= 255 # normalize data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(70000, 784)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 70,000 images w/ shape 28x28=784 \n",
    "# row = image/sample\n",
    "# col = represents a variable\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# split data\n",
    "train = data[:42000]\n",
    "development = data[42000:56000]\n",
    "test = data[56000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split labels\n",
    "train_labels = labels[:42000]\n",
    "development_labels = labels[42000:56000]\n",
    "test_labels = labels[56000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 784)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14000, 784)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14000, 784)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "development.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n0bp167A+9/vvv0v+3//937CuocdJVKpUSbJ+3owxpnr16pKrVKlilQ0bNizLesRzDFOq0MsIGGPM\nG2+8Idmdpq7pnzm9ZATi5/Dhw9bxhg0bJOsxTCVLloxZnWKJN0wAAAAeNJgAAAA8UqpLTps0aZJ1\nfNddd0muWrWq5P3794d1/QkpwT8PAAAarklEQVQTJoRXMeRKjRo1kux2T+lut2LFilllwS7boada\n50bXXXedday7WdavXx/wc/oV/o4dOyJaJ72KuDHGfPfdd5Kz6zpv2bKlZN0Viujo3LmzdazvzQcf\nfCBZ/w42JrzV3xFbEydOlNygQQPJF154YRxqE328YQIAAPCgwQQAAOBBgwkAAMAjpbZGyc5NN90k\necCAAZKrVasW1vV0H+7atWvDr1gOper2C+Fwl++/5JJLJNesWTOoaxw4cMA6njp1quTly5dLdrd2\nOHr0aFDXT4XtF4Klx44ZY/9bu44dOyb56quvlqx3vY+1ZH42ly1bJtn9Hbp9+3bJevmVjRs3Rr9i\nUZSKz+a5554recuWLZIzMjKs88477zzJkR7LGA1sjQIAABAmGkwAAAAeKbusgOvtt9+WrHfQdlfp\n1t002Rk6dKhk3d2H+CpRooR1PHz4cMm33nqrVaZXhl+xYoXkESNGWOetXr1a8pEjR6wyd6V4hC5/\n/vySx40bJ7lLly5BX6N27dqSV65cGZmKwXLDDTdIvvLKKyW7wz7eeustycF2RSP306u262fWGHsp\nj+eeey5mdYo03jABAAB40GACAADwoEvuPzp27ChZr/TtbuIZLN2th9zj4Ycfto5vu+02yePHj7fK\n9GzJgwcPRrdiENdcc411rFeK7tq1a8DP/fHHH5J79uxplcVzpmqycjc/1rMPs7Nnzx7J6enpYX13\nr169JOuZWq4+ffqEdX2ELrsZ924XXaLiDRMAAIAHDSYAAAAPGkwAAAAeKTWGqXLlypJnzZpllZUv\nX15yvnw5/2d59913c3wNBK9QoULWcb9+/STrMTD33nuvdd7ixYslz58/3ypjynPsXHHFFZLdpTzy\n5s0b1DX0GAp3OYc///wzB7VDVtx/0xo1akjOk+ev/xY/ceKEdd6nn34a1PXvu+++gGU9evSQXLZs\n2YDn9e7dW/I555xjlW3bti2oegD/xRsmAAAADxpMAAAAHinVJac3xNWbARoTmW44Tb9O1q+PER0D\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ffab4e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# display a few images\n",
    "nrows = 4; ncols= 5;\n",
    "\n",
    "plt.figure(figsize=(ncols * 2, nrows * 2))\n",
    "for i in range(nrows * ncols):\n",
    "    plt.subplot(nrows, ncols, i+1)\n",
    "    plt.imshow(data[i].reshape((28, 28)), cmap='gray')\n",
    "    plt.axis('off')\n",
    "\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#single image display\n",
    "#plt.imshow(data[1].reshape(28, 28), cmap='gray')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 1: PCA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part a)\n",
    "steps:\n",
    "- normalize data to zero mean\n",
    "- calculate covariance matrix $\\Sigma$\n",
    "- find orthonormal eigenvectors of $\\Sigma$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function performs PCA\n",
    "def pca(data, n_components):\n",
    "    \n",
    "    # normaliza data to zero mean\n",
    "    center_data = data - data.mean(axis=0)\n",
    "    \n",
    "    # calculate covariance matrix of data\n",
    "    cov = np.cov(center_data.T)\n",
    "    \n",
    "    # eigenvectors of covariance matrix\n",
    "    # eigenvalues denote amount of variance\n",
    "    # 1st component has largest variance, 2nd has 2nd, & etc.\n",
    "    evalues, evector = np.linalg.eig(cov)\n",
    "    \n",
    "    order = evalues.argsort()[::-1] # gives proper order (max to min)\n",
    "    num = order[:n_components]\n",
    "    components = evector[:, num].T.real  # only real values\n",
    "    \n",
    "    return components, evalues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract first ten principal components\n",
    "components, _ = pca(train, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nEr84GWOMMcZU4hcnY4wxxphKJmVV3agwa9YrAfTHHffKO+Xxx5fNNHv27DGPUzQr+8GDB9vyyy+/\nXNQdOnSo7/ec3f0VoraI2q1fWeE+oKit+djoe+YVavuytme/tuaxeLTf4jHG5bE+R9dSWzfTiNoi\nsju3vc6LETwetR8MMi/X1s1kormO25rLelw0B7PddSyOd844ltjjZIwxxhhTiV+cjDHGGGMqmfZS\n3SCu134SwEknnVQcd8opp7TlE044oe85WJoDgBdeeKEtP//880XdSy+91JYHcVdPR9fyeCWWSP6M\nzhG5/FmmVfd/5JZmZrI0EMmnkUtev9dPRo+OU7h/RH0lkgkjCUiZjjLeIPcU2ZrnO54Xuazf07bn\neZnnZAA48cQT+36v3zUC5f1N97EZUSvHAeWcyfOlnoNtqXbmZ6U+N8d7Xcdy/NnjZIwxxhhTiV+c\njDHGGGMq8YuTMcYYY0wl0zLGqTaOQmGNlDXy0047rTiO9XTVUVm7ZR0fAJ577rm+dXxd442XGSWi\n2BeNP+HP2m4vvvhiW1bdvF9Mmf72ySef3JbPOuusou6MM84Ys6zfi+LZ2O56bBRrMyoMYku2H9sO\nKG2k3+MxEcW28BjWc/DvaR3HaWjcIn+uTZMwnahNx6B9l9v76aefLur27ds3ZvnAgQPFcXxOnYfn\nz5/fls8555yi7vTTT2/LPJcDg8WpjTqDxOtxfJK2GY85jfnVdD1H0Lma+4D2B7a7zuP9rgMo52Ad\nt7UxqONh5vQgY4wxxpgJ4hcnY4wxxphKRlaqY1d7lKFb5QB2H6qrkl3B8+bNa8vsDtTv7d+/v6jb\ns2dPW1a3M1+XujdrUxxMFxkvyhyrshfbUNM4RFIdHxtJdWyLOXPmFHXLly9vyytWrCjq+Fi9Lu4H\ne/fuLeq4X0RpKbos20VyONtPbfLss8+OWQZKW6pLniXUBQsWtOW5c+f2va5nnnmmqOPPKiP0W1IN\nxLsIRLJkbbb6LhDNMbXpGPQeuY2feOKJom7btm1teefOnW1Z+8Spp57alrXtuW/p9xiVc7lv6Tmn\nw/waZdbn+9UxxvOZyqJsB5XxePzz8/DJJ58sjuN5kOVZAHjqqafass4Z3OdYggXie+XPURbz8WCP\nkzHGGGNMJX5xMsYYY4ypxC9OxhhjjDGVjEyMU7REXTVRjmVg7VSP1dgl1m5Z/9XjOC7lscceK+oe\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1104ec780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# display first ten principal components\n",
    "nrows = 2; ncols= 5;\n",
    "plt.figure(figsize=(ncols * 2, nrows * 2))\n",
    "for i in range(nrows * ncols):\n",
    "    plt.subplot(nrows, ncols, i+1)\n",
    "    plt.imshow((components)[i].reshape((28, 28)), cmap='gray')\n",
    "    plt.axis('off')\n",
    "\n",
    "    plt.title(\"Component {}\".format(i))\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part b)\n",
    "The singular values, or eigenvalues, correspond to the variance of the principal components."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "all_components, all_eigenvalues = pca(train, len(train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(784, 784)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_components.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1104e79e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(all_eigenvalues.real, c='orange')\n",
    "plt.xlabel('Number of singular values')\n",
    "plt.title('PCA singular values')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nvl90f14vk1eFtlgl2eZcqcI75HI9+0sV1b+SXljny/SNSqao5LitIs+Nku/EOkupjp/NPMpsWZ+8\nJ8u+6vuZV9kpKraaHLdWlpHLyGj/yPbAel7mN3WO9eWKk4iIiMggTpxEREREBnHiJCIiIjLIlvQ4\njfqT5sSF5mNKKq8It7/mVtiN1L+3op/lfFD1sfXof9URDGwPa60v67mnKo/Kg7SRzzFHH8wcWetv\n42ifWI86WoW6nOcsQkRERGSGOHESERERGeQil6VFRERExnDFSURERGQQJ04iIiIigzhxEhERERnE\niZOIiIjIIE6cRERERAZx4iQiIiIyiBMnERERkUGcOImIiIgM4sRJREREZBAnTiIiIiKDOHESERER\nGcSJk4iIiMggTpxEREREBnHiJCIiIjKIEycRERGRQZw4iYiIiAzixElERERkECdOIiIiIoM4cRIR\nEREZxImTiIiIyCBOnEREREQGceIkIiIiMsglG/Eljz/++Dcb8T2ymCeeeOKi9brX73//e+tzk/np\nT3+6LvX5m9/8xrrcZH7+85+vW9/82c9+Zn1uMr/73e/WpT5/8YtfWJebzK9//euz1qUrTiIiIiKD\nOHESERERGcSJk4iIiMggTpxEREREBnHiJCIiIjLIhuyqWxUuuug/Bvpvfes/c8pLLumL6eKLLz7r\n55Jvvuk3RXz55ZdT+quvvuryvv7664X/l9cXMlVZVOW2KJ2wDSRZ1/xs9X/yH0bbcpbnorJmX/xv\n38U+xvTZrqtnGc270KjKoqp3ln2OixXsj9kOlhmXR/MuZFgu2VcW5WVZVuNlVZejfWwj684VJxER\nEZFBnDiJiIiIDLLlpbpllu8WSQCXXXZZ97krrrhiSl966aUL70FprrXWPvvssyn96aefdnlffPHF\nlF5muXorLi2vVWKp5M/qHtUyMWXaXP7n9Vpliq1Yf6SST6sl/2qZn+VefS5h+6jaSiUTVhJQshVl\nvGXeqaprjnccF5nO/8uy57jMMbm11r797W8v/L9Fz9ha/35bvW9WLDMGL7Kg5D1YD/mbyt/RSn5P\nquc6n/XnipOIiIjIIE6cRERERAZx4iQiIiIyyJb0OI36KBJqsNTIr7766u5z1NNT86dGTx2/tdY+\n+eSThXl8rrX6ZVaJyvuS/hNeZ7l9/vnnUzr9EYs8Zfndl19++ZS+4YYburxt27adNZ3/V/nZWO/5\n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\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10cd7bc88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# project components on random \n",
    "# a random image\n",
    "\n",
    "num = np.random.randint(len(test))\n",
    "image = test[num] - test[num].mean() # subtract mean\n",
    "\n",
    "project = (image.dot(all_components[:10].T) / \n",
    "       np.linalg.norm(all_components[:10], axis=1)) * all_components[:10].T\n",
    "\n",
    "project\n",
    "project += test[num].mean()\n",
    "# plotting\n",
    "nrows = 2; ncols= 5;\n",
    "plt.figure(figsize=(ncols * 2, nrows * 2))\n",
    "for i in range(nrows * ncols):\n",
    "    plt.subplot(nrows, ncols, i+1)\n",
    "    plt.imshow((project.T)[i].reshape((28, 28)), cmap='gray')\n",
    "    plt.axis('off')\n",
    "\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The components all seem to get some aspect of the digit.\n",
    "<br>If the components added cumulatively, then the digit gradually\n",
    "appears better. \n",
    "<br> The top components seems to capture the area were the digit\n",
    "resides."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: k-means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# cluster training data\n",
    "num_clusters = 25\n",
    "model = KMeans(n_clusters=num_clusters).fit(train)\n",
    "\n",
    "# get centers & cluster labels\n",
    "centers = model.cluster_centers_\n",
    "cluster_labels = model.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# dataframe allows to compare the digit label\n",
    "# with cluster label \n",
    "train_df = pd.DataFrame(train)\n",
    "train_df.index.name = 'Data Point'\n",
    "train_df['Cluster Label'] = cluster_labels\n",
    "train_df['Digit Label'] = train_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# sort by Cluster Label column\n",
    "train_df = train_df.sort_values(['Cluster Label'])\n",
    "#train_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# associate centers w/ the digit label by\n",
    "# the most common digit label\n",
    "# for that cluster \n",
    "\n",
    "labeled_centers = np.zeros(num_clusters, dtype=int)\n",
    "for i in range(num_clusters):\n",
    "    labeled_centers[i] = train_df[train_df['Cluster Label'] == i]['Digit Label'].mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 5, 3, 1, 2, 7, 0, 6, 9, 1, 6, 3, 9, 7, 3, 1, 4, 2, 0, 8, 6, 3, 0,\n",
       "       8, 4])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labeled_centers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>774</th>\n",
       "      <th>775</th>\n",
       "      <th>776</th>\n",
       "      <th>777</th>\n",
       "      <th>778</th>\n",
       "      <th>779</th>\n",
       "      <th>780</th>\n",
       "      <th>781</th>\n",
       "      <th>782</th>\n",
       "      <th>783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.830474e-18</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.409463e-18</td>\n",
       "      <td>-3.388132e-19</td>\n",
       "      <td>-1.368805e-18</td>\n",
       "      <td>-1.626303e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.779825e-04</td>\n",
       "      <td>3.937318e-06</td>\n",
       "      <td>8.321252e-18</td>\n",
       "      <td>2.995109e-18</td>\n",
       "      <td>1.165517e-18</td>\n",
       "      <td>-2.812149e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.385245e-18</td>\n",
       "      <td>4.499439e-18</td>\n",
       "      <td>3.361027e-18</td>\n",
       "      <td>5.963112e-19</td>\n",
       "      <td>-1.666961e-18</td>\n",
       "      <td>-1.948176e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.439455e-17</td>\n",
       "      <td>1.544988e-17</td>\n",
       "      <td>8.023096e-18</td>\n",
       "      <td>2.846031e-18</td>\n",
       "      <td>9.757820e-19</td>\n",
       "      <td>-2.761327e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.561251e-17</td>\n",
       "      <td>1.105886e-17</td>\n",
       "      <td>6.152847e-18</td>\n",
       "      <td>1.951564e-18</td>\n",
       "      <td>-1.626303e-19</td>\n",
       "      <td>-2.439455e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.046608e-17</td>\n",
       "      <td>1.843144e-17</td>\n",
       "      <td>6.830474e-18</td>\n",
       "      <td>3.455894e-18</td>\n",
       "      <td>1.761829e-18</td>\n",
       "      <td>-2.981556e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.938894e-18</td>\n",
       "      <td>-1.084202e-19</td>\n",
       "      <td>1.382358e-18</td>\n",
       "      <td>-3.523657e-19</td>\n",
       "      <td>-1.368805e-18</td>\n",
       "      <td>-1.626303e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.279359e-17</td>\n",
       "      <td>9.649399e-18</td>\n",
       "      <td>5.556536e-18</td>\n",
       "      <td>1.653408e-18</td>\n",
       "      <td>-5.285486e-19</td>\n",
       "      <td>-2.337811e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.584259e-04</td>\n",
       "      <td>4.038514e-04</td>\n",
       "      <td>1.418937e-04</td>\n",
       "      <td>2.114194e-18</td>\n",
       "      <td>2.886688e-18</td>\n",
       "      <td>-3.303428e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.710505e-18</td>\n",
       "      <td>4.716279e-18</td>\n",
       "      <td>3.442342e-18</td>\n",
       "      <td>6.369688e-19</td>\n",
       "      <td>-1.680513e-18</td>\n",
       "      <td>-1.965116e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.420305e-17</td>\n",
       "      <td>-4.987330e-18</td>\n",
       "      <td>-3.171291e-18</td>\n",
       "      <td>-1.450120e-18</td>\n",
       "      <td>-6.640738e-19</td>\n",
       "      <td>-8.300923e-20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.743031e-17</td>\n",
       "      <td>1.691355e-17</td>\n",
       "      <td>8.646512e-18</td>\n",
       "      <td>3.144186e-18</td>\n",
       "      <td>1.368805e-18</td>\n",
       "      <td>-2.879912e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-3.599551e-17</td>\n",
       "      <td>2.114194e-17</td>\n",
       "      <td>3.035766e-18</td>\n",
       "      <td>3.401684e-18</td>\n",
       "      <td>2.480112e-18</td>\n",
       "      <td>-3.184844e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.190670e-02</td>\n",
       "      <td>4.657347e-03</td>\n",
       "      <td>1.897533e-03</td>\n",
       "      <td>4.569570e-04</td>\n",
       "      <td>5.679691e-05</td>\n",
       "      <td>-2.083701e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.160096e-17</td>\n",
       "      <td>9.053088e-18</td>\n",
       "      <td>5.312591e-18</td>\n",
       "      <td>1.531436e-18</td>\n",
       "      <td>-6.911789e-19</td>\n",
       "      <td>-2.286989e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.547875e-17</td>\n",
       "      <td>1.593777e-17</td>\n",
       "      <td>8.239937e-18</td>\n",
       "      <td>2.954451e-18</td>\n",
       "      <td>1.111307e-18</td>\n",
       "      <td>-2.795209e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.944138e-03</td>\n",
       "      <td>5.853693e-03</td>\n",
       "      <td>4.267870e-03</td>\n",
       "      <td>2.340522e-03</td>\n",
       "      <td>2.113635e-03</td>\n",
       "      <td>2.865945e-04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.170938e-17</td>\n",
       "      <td>9.107298e-18</td>\n",
       "      <td>5.312591e-18</td>\n",
       "      <td>1.544988e-18</td>\n",
       "      <td>-6.776264e-19</td>\n",
       "      <td>-2.286989e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.252607e-18</td>\n",
       "      <td>1.734723e-18</td>\n",
       "      <td>2.168404e-18</td>\n",
       "      <td>2.710505e-20</td>\n",
       "      <td>-1.490778e-18</td>\n",
       "      <td>-1.761829e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.192622e-18</td>\n",
       "      <td>2.764716e-18</td>\n",
       "      <td>2.602085e-18</td>\n",
       "      <td>2.303930e-19</td>\n",
       "      <td>-1.544988e-18</td>\n",
       "      <td>-1.812651e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.257675e-17</td>\n",
       "      <td>9.540979e-18</td>\n",
       "      <td>5.502326e-18</td>\n",
       "      <td>1.639856e-18</td>\n",
       "      <td>-5.556536e-19</td>\n",
       "      <td>-2.320870e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.192622e-18</td>\n",
       "      <td>3.957338e-18</td>\n",
       "      <td>3.117081e-18</td>\n",
       "      <td>4.743385e-19</td>\n",
       "      <td>-1.626303e-18</td>\n",
       "      <td>-1.914294e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.496199e-17</td>\n",
       "      <td>-5.095750e-18</td>\n",
       "      <td>-7.589415e-19</td>\n",
       "      <td>-1.382358e-18</td>\n",
       "      <td>-1.043545e-18</td>\n",
       "      <td>-1.253609e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-9.107298e-18</td>\n",
       "      <td>7.860466e-18</td>\n",
       "      <td>4.797595e-18</td>\n",
       "      <td>1.287490e-18</td>\n",
       "      <td>-1.002887e-18</td>\n",
       "      <td>-2.202286e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-2.667137e-17</td>\n",
       "      <td>1.653408e-17</td>\n",
       "      <td>8.483882e-18</td>\n",
       "      <td>3.062871e-18</td>\n",
       "      <td>1.260385e-18</td>\n",
       "      <td>-2.846031e-19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25 rows × 784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    0    1    2    3    4    5    6    7    8    9   ...            774  \\\n",
       "0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   6.830474e-18   \n",
       "1   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   3.779825e-04   \n",
       "2   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.385245e-18   \n",
       "3   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.439455e-17   \n",
       "4   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.561251e-17   \n",
       "5   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -3.046608e-17   \n",
       "6   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   6.938894e-18   \n",
       "7   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.279359e-17   \n",
       "8   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   4.584259e-04   \n",
       "9   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.710505e-18   \n",
       "10  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   1.420305e-17   \n",
       "11  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.743031e-17   \n",
       "12  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -3.599551e-17   \n",
       "13  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   1.190670e-02   \n",
       "14  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.160096e-17   \n",
       "15  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.547875e-17   \n",
       "16  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   8.944138e-03   \n",
       "17  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.170938e-17   \n",
       "18  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   3.252607e-18   \n",
       "19  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   1.192622e-18   \n",
       "20  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.257675e-17   \n",
       "21  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -1.192622e-18   \n",
       "22  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...   1.496199e-17   \n",
       "23  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -9.107298e-18   \n",
       "24  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0 ...  -2.667137e-17   \n",
       "\n",
       "             775           776           777           778           779  780  \\\n",
       "0   0.000000e+00  1.409463e-18 -3.388132e-19 -1.368805e-18 -1.626303e-19  0.0   \n",
       "1   3.937318e-06  8.321252e-18  2.995109e-18  1.165517e-18 -2.812149e-19  0.0   \n",
       "2   4.499439e-18  3.361027e-18  5.963112e-19 -1.666961e-18 -1.948176e-19  0.0   \n",
       "3   1.544988e-17  8.023096e-18  2.846031e-18  9.757820e-19 -2.761327e-19  0.0   \n",
       "4   1.105886e-17  6.152847e-18  1.951564e-18 -1.626303e-19 -2.439455e-19  0.0   \n",
       "5   1.843144e-17  6.830474e-18  3.455894e-18  1.761829e-18 -2.981556e-19  0.0   \n",
       "6  -1.084202e-19  1.382358e-18 -3.523657e-19 -1.368805e-18 -1.626303e-19  0.0   \n",
       "7   9.649399e-18  5.556536e-18  1.653408e-18 -5.285486e-19 -2.337811e-19  0.0   \n",
       "8   4.038514e-04  1.418937e-04  2.114194e-18  2.886688e-18 -3.303428e-19  0.0   \n",
       "9   4.716279e-18  3.442342e-18  6.369688e-19 -1.680513e-18 -1.965116e-19  0.0   \n",
       "10 -4.987330e-18 -3.171291e-18 -1.450120e-18 -6.640738e-19 -8.300923e-20  0.0   \n",
       "11  1.691355e-17  8.646512e-18  3.144186e-18  1.368805e-18 -2.879912e-19  0.0   \n",
       "12  2.114194e-17  3.035766e-18  3.401684e-18  2.480112e-18 -3.184844e-19  0.0   \n",
       "13  4.657347e-03  1.897533e-03  4.569570e-04  5.679691e-05 -2.083701e-19  0.0   \n",
       "14  9.053088e-18  5.312591e-18  1.531436e-18 -6.911789e-19 -2.286989e-19  0.0   \n",
       "15  1.593777e-17  8.239937e-18  2.954451e-18  1.111307e-18 -2.795209e-19  0.0   \n",
       "16  5.853693e-03  4.267870e-03  2.340522e-03  2.113635e-03  2.865945e-04  0.0   \n",
       "17  9.107298e-18  5.312591e-18  1.544988e-18 -6.776264e-19 -2.286989e-19  0.0   \n",
       "18  1.734723e-18  2.168404e-18  2.710505e-20 -1.490778e-18 -1.761829e-19  0.0   \n",
       "19  2.764716e-18  2.602085e-18  2.303930e-19 -1.544988e-18 -1.812651e-19  0.0   \n",
       "20  9.540979e-18  5.502326e-18  1.639856e-18 -5.556536e-19 -2.320870e-19  0.0   \n",
       "21  3.957338e-18  3.117081e-18  4.743385e-19 -1.626303e-18 -1.914294e-19  0.0   \n",
       "22 -5.095750e-18 -7.589415e-19 -1.382358e-18 -1.043545e-18 -1.253609e-19  0.0   \n",
       "23  7.860466e-18  4.797595e-18  1.287490e-18 -1.002887e-18 -2.202286e-19  0.0   \n",
       "24  1.653408e-17  8.483882e-18  3.062871e-18  1.260385e-18 -2.846031e-19  0.0   \n",
       "\n",
       "    781  782  783  \n",
       "0   0.0  0.0  0.0  \n",
       "1   0.0  0.0  0.0  \n",
       "2   0.0  0.0  0.0  \n",
       "3   0.0  0.0  0.0  \n",
       "4   0.0  0.0  0.0  \n",
       "5   0.0  0.0  0.0  \n",
       "6   0.0  0.0  0.0  \n",
       "7   0.0  0.0  0.0  \n",
       "8   0.0  0.0  0.0  \n",
       "9   0.0  0.0  0.0  \n",
       "10  0.0  0.0  0.0  \n",
       "11  0.0  0.0  0.0  \n",
       "12  0.0  0.0  0.0  \n",
       "13  0.0  0.0  0.0  \n",
       "14  0.0  0.0  0.0  \n",
       "15  0.0  0.0  0.0  \n",
       "16  0.0  0.0  0.0  \n",
       "17  0.0  0.0  0.0  \n",
       "18  0.0  0.0  0.0  \n",
       "19  0.0  0.0  0.0  \n",
       "20  0.0  0.0  0.0  \n",
       "21  0.0  0.0  0.0  \n",
       "22  0.0  0.0  0.0  \n",
       "23  0.0  0.0  0.0  \n",
       "24  0.0  0.0  0.0  \n",
       "\n",
       "[25 rows x 784 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cluster centers\n",
    "pd.DataFrame(centers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# where we see the first center is \n",
    "# associated with digit label 5\n",
    "labeled_centers = list(zip(labeled_centers, centers))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# infer label from test data by\n",
    "# finding closest cluster center\n",
    "def infer_label(data, labeled_centers):\n",
    "    \n",
    "    index = 0\n",
    "    val = 1000  # large number to get the if-condition going\n",
    "    for i in range(len(labeled_centers)):\n",
    "        tmp = np.linalg.norm(data - labeled_centers[i][1])\n",
    "        if val > tmp:\n",
    "            val = tmp\n",
    "            index = i\n",
    "            \n",
    "    return labeled_centers[index][0]\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk4AAAEDCAYAAADDd4vaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzt3Xu81VP+x/H3KQqZ0URuya1+FrnE\nFD8jBkmZktBULhXFDxGRJJEJMS4x6TI1D5TL+AkJXVCG5DIYiWRipeYXNRlyj4ri/P7Y27LWV/u0\n9jl777PPPq/n4+ExnzWf7/e71znrfM9Zfdf6rlVWXl4uAAAAbFqd6q4AAABATUHHCQAAIBIdJwAA\ngEh0nAAAACLRcQIAAIhExwkAACDSZtX54caYZZJ+b62dV8ExdSVNlbSPpNHW2rEFqNdYSZ9Ya4cn\n/v8zlarv8Vlc6yhJY621+2VZh2Xa9PemvqTRktpK+lrSdEnDrbU/ZPNZuUBbVnjeMm3ie5M+rquk\noZLqS3pfUm9r7afZfFau0J4VnrdMm/7e1JM0RtIR6f/rSUmDrbXfZ/NZuUBbVnjeMm36e1NH0o2S\nOkn6QdJ7ks611q7K5rNyhfas8LxlKsDfzZrwxKmJpA6S9ilE49cwQyXtJml/Sa0k7STp/GqtUcVo\nywyMMa0ljZXUNf3LYrGk66u3VptEe2bWX1JjSftJOkDSYZK6V2uNKkZbZtZXqd+vv7bW7i9piaRb\nq7dKm0R7Zlblv5vV+sTJZ4xZp1Sv/lhJO0u6XdJdkp6StLmk19P/Iq+Xzm0rqa5SvemJ6R7q7ZK+\nkdRA0mBJN3vlQyS1l3RV+hprJA2y1r5sjPmlpDsltZT0oaQNkl7Msv7HK9Ug9SRtL+kea+2wdHpr\nY8wUSc0lfSHpHGvt4vS/Sm+SdGT6a3lD0kXW2q8S135C0gRr7bTEx7aSNNlauy593GOSLlPqD3C1\noS0r1ZY9Jd1lrV2WLg9Pf1+qHe2ZfXtaa28zxoyx1v5gjGksqaGkz7Kpdz7QlpW6N/8p6TJr7bfp\n8jxJF2RT73yhPavn72YxPXGqr9RjvjaSfq/UD8N6SR0lrbXWHqjU8MUUSUOsta2U+sYNMsYcmr7G\nfpJOtda2lPRtoryrpBskdbTWHiTpHElTjTENJF0jaa2kvSV1k2SyqbgxpkzSpZLOsNa2lnSopCuM\n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\n37/RHadimuNUX9In1to2kn6v1A/DekkdJa211h4o6X1JUyQNsda2UuobN8gYc2j6GvtJOtVa21LS\nt4nyrpJukNTRWnuQpHMkTTXGNJB0jaS1kvZWqidqsql4+jHfpZLOsNa2lnSopCuMMdulD2kq6bb0\n1/C/ku5L//9DlPpha5Wu48r01x2w1nbMcDPvJWmz9CPZBZLGSVqdTd3zhLYsnbaUaM/KtKesteuN\nMTdKWirpI6WeOlU32rJybXmctfblbOpbILRn9u3ZVNJyr7xC0i7Z1L1onjilPZ7+3/lK/UA0SOT3\nktRM0kRjXBttKekgSe9IWm6tfd873i8fK2knSc945/6gVG+2naSLrbXlklYZYx7NptLW2nJjTGdJ\nxxtjTpO0j6Qyr/5vWWv/no7vljTeGLONpOOV+pfosek61ZP0cRYfvbmkzpKOSZ93s6Q7JJ2YTf3z\nhLYsnbaUaM9s2/PHzx9ijBmmVFuOV+qpRXWjLSvRlkWM9syuPTf2wCir4cxi6zitldw3VEp9E311\nJX2R7oFKkowxO0j6Uqne6teJ479OnPuMtbaHd25TpXqr5YnP2pBNpdO97zckParUvyonKvUH78dr\nJhulXKl/FdSVNMBa+2T6OltL2iKLj14paaG19j/p8ydJejabuucRbVk6bSnRnlm1pzGmjaRV1trF\n6SdPd0sak03d84i2zO7eLHa0Z3bt+YFSncEfNVHqqVO0Yhqqi2ElrTPG9JRcA76t1CSvTXlWUntj\nzN7pcztKekupb/hTks4yxtQxxvxKUpcs6/Vfkn4p6Spr7XSlHoXWV6qBJamlMebHH9pzJb1orV2j\n1KS0/ib1Bk4dpf5V+scsPneKpE7mp7evTpb0WpZ1ry60Zagmt6VEeya1lfQnY8xm6fNPV3F1hCtC\nW5YW2jP0uKTTjTENjDH1JZ0p6bFsKl6jOk7W2u+UapyzjTFvSZotaZi19qWIc/+p1PjsZJOaQ3Kd\npBNsaoLYcKV6su9Kmi5pYQWXOs4Y87X33wqlfpBmSHrXGDNf0glKzdJvnj7nHUl/SH/uCfrpcf11\nkpYp1etepFRP+9LkBxpjnjDGnLCRr2m6Um96zDXGLJJ0WPprLHq05c++phrblhLtuZG63KTU3JIF\n6f82SLpiU9+LYkBblhba82df03RJUyX9Q6kO5OuS7t3U98JXVl5ens3xAAAAtVaNeuIEAABQneg4\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10ce38828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# display a few random images\n",
    "# from the test data\n",
    "\n",
    "random = test[np.random.randint(len(test), size=10)]  # ten random images\n",
    "nrows = 2; ncols= 5;\n",
    "\n",
    "plt.figure(figsize=(ncols * 2, nrows * 2))\n",
    "for i in range(nrows * ncols):\n",
    "    plt.subplot(nrows, ncols, i+1)\n",
    "    plt.imshow(random[i].reshape((28, 28)), cmap='gray')\n",
    "    plt.axis('off')\n",
    "\n",
    "    plt.title(\"Inferred Label: {}\".format(infer_label(random[i], labeled_centers)))\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here are ten random images where their digit label is being inferred. Although not perfect, the k-mean does represent some digits well. I noticed that it struggles comparing 4 and 9."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Spectral clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# training set for spectral clustering\n",
    "spectral_train = train[:1000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#weights = sim_matrix(spectral_train, h=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000, 1000)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rows = spectral_train.shape[0]\n",
    "weights = np.zeros((rows, rows))\n",
    "weights.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#weights = np.zeros(spectral_train.shape)\n",
    "h = 0.2\n",
    "for i in range(rows):\n",
    "    for j in range(rows):\n",
    "        weights[i][j] = np.exp(-(np.linalg.norm(\n",
    "            spectral_train[i] - spectral_train[j]) ** 2) / h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get sum of each row\n",
    "# form diagonal matrix w/ each sum\n",
    "weights_sum = weights.sum(axis=1)\n",
    "diagonal = np.zeros(weights.shape)\n",
    "np.fill_diagonal(diagonal, weights_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# diagonal inverse\n",
    "inv = np.linalg.inv(diagonal ** 0.5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Laplacian\n",
    "lap = np.eye(inv.shape[0]) - (inv * weights * inv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "evalues, evectors = np.linalg.eig(lap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 4: Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "lg = LogisticRegression(fit_intercept=True, C=1000000, penalty='l2',\n",
    "                       solver='lbfgs', multi_class='multinomial')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1000000, class_weight=None, dual=False,\n",
       "          fit_intercept=True, intercept_scaling=1, max_iter=100,\n",
       "          multi_class='multinomial', n_jobs=1, penalty='l2',\n",
       "          random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "          warm_start=False)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lg.fit(train[:1000], train_labels[:1000])  #(42000,784) (42000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# returns predicted labels for development data\n",
    "# using trained model\n",
    "predict = lg.predict(development)  #(14000, 784)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error rate 18 percent\n"
     ]
    }
   ],
   "source": [
    "score = lg.score(development, development_labels)\n",
    "err_rate = 1 - score\n",
    "print('Error rate %d percent' % (err_rate *100.))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# initiate logistc regression\n",
    "# for principal components \n",
    "lg_PC = LogisticRegression(fit_intercept=True, C=1000000, penalty='l2',\n",
    "                           solver='lbfgs', multi_class='multinomial')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# (42000, 100)\n",
    "projected_train = np.matmul(train, all_components[:100].T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#(100, 14000)\n",
    "projected_development = np.matmul(all_components[:100], development.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1000000, class_weight=None, dual=False,\n",
       "          fit_intercept=True, intercept_scaling=1, max_iter=100,\n",
       "          multi_class='multinomial', n_jobs=1, penalty='l2',\n",
       "          random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "          warm_start=False)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lg_PC.fit(projected_train, train_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict_PC = lg_PC.predict(projected_development.T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def count_error(predict, label_dev):\n",
    "    c = 0\n",
    "    for i in range(len(label_dev)):\n",
    "        if predict[i] != label_dev[i]:\n",
    "            c += 1\n",
    "            \n",
    "    return c * 1.0 / len(label_dev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.09035714285714286"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_error(predict_PC, development_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error rate 9.04% percent\n"
     ]
    }
   ],
   "source": [
    "score = lg_PC.score(projected_development.T, development_labels)\n",
    "err_rate = 1 - score\n",
    "print('Error rate {:.2f}% percent'.format(err_rate *100.))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function will be passed under a for loop\n",
    "# to see what the optimal k is\n",
    "# i.e. when the hits a minimum\n",
    "def optimal_ksearch(k_num, training_data, development_data):\n",
    "    lg_PC = LogisticRegression(fit_intercept=True, C=1000000, penalty='l2',\n",
    "                           solver='lbfgs', multi_class='multinomial')\n",
    "    \n",
    "    projected_train = np.matmul(training_data, all_components[:k_num].T)\n",
    "    projected_development = np.matmul(all_components[:k_num],\n",
    "                                      development_data.T)\n",
    "    \n",
    "    lg_PC.fit(projected_train, train_labels)\n",
    "    predict_PC = lg_PC.predict(projected_development.T)\n",
    "    score = lg_PC.score(projected_development.T, development_labels)\n",
    "    err_rate = 1 - score\n",
    "    \n",
    "    return err_rate *100\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get error of 49 k-values\n",
    "error_array = np.zeros(49)\n",
    "val = 0\n",
    "for i in range(3,150, 3):\n",
    "    error_array[val] = optimal_ksearch(i, train, development)\n",
    "    val+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nRKSs/w/BGxdnU1dw3QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113be7358>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot error as a function of k\n",
    "x = np.linspace(3,150, 49)\n",
    "plt.plot(x, (error_array * 100), c='orange')\n",
    "plt.ylabel('Error in Percentage')\n",
    "plt.xlabel('Number k-components used')\n",
    "plt.title('Error in Logistic Regression with PCA')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KMeans\t LogisticRegression\t all_components\t all_eigenvalues\t centers\t cluster_labels\t components\t count_error\t data\t \n",
      "development\t development_labels\t diagonal\t err_rate\t evalues\t evectors\t h\t i\t image\t \n",
      "infer_label\t inv\t j\t labeled_centers\t labels\t lap\t lg\t lg_PC\t model\t \n",
      "ncols\t np\t nrows\t num\t num_clusters\t pca\t pd\t plt\t predict\t \n",
      "predict_PC\t project\t projected_development\t projected_train\t random\t rows\t score\t sns\t spectral_train\t \n",
      "test\t test_labels\t train\t train_df\t train_labels\t weights\t weights_sum\t \n"
     ]
    }
   ],
   "source": [
    "%who"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 54.34285714,  29.00714286,  22.51428571,  18.95714286,\n",
       "        17.17142857,  14.78571429,  13.62142857,  12.62857143,\n",
       "        12.11428571,  11.73571429,  11.41428571,  11.17142857,\n",
       "        11.06428571,  10.69285714,  10.37857143,  10.2       ,\n",
       "        10.16428571,   9.87142857,   9.60714286,   9.57142857,\n",
       "         9.62857143,   9.62142857,   9.63571429,   9.57857143,\n",
       "         9.45      ,   9.24285714,   9.37142857,   9.30714286,\n",
       "         9.22857143,   9.17857143,   9.05      ,   9.12857143,\n",
       "         9.06428571,   8.87857143,   8.9       ,   8.95      ,\n",
       "         8.9       ,   8.81428571,   8.84285714,   8.83571429,\n",
       "         8.82857143,   8.87142857,   8.75714286,   8.86428571,\n",
       "         8.90714286,   8.9       ,   8.89285714,   8.90714286,   8.91428571])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error_array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error_array.argmin()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "132"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "optimal_k = int(x[42].round())\n",
    "optimal_k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.concatenate((train, development))\n",
    "projected_data = np.matmul(data, all_components[:optimal_k].T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "lg_optimal = LogisticRegression(fit_intercept=True, C=1000000, penalty='l2',\n",
    "                           solver='lbfgs', multi_class='multinomial')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1000000, class_weight=None, dual=False,\n",
       "          fit_intercept=True, intercept_scaling=1, max_iter=100,\n",
       "          multi_class='multinomial', n_jobs=1, penalty='l2',\n",
       "          random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "          warm_start=False)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_labels = np.concatenate((train_labels, development_labels))\n",
    "lg_optimal.fit(projected_data, data_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "projected_test = np.matmul(all_components[:optimal_k], test.T)\n",
    "predict_optimal = lg_optimal.predict(projected_test.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "score_optimal = lg_optimal.score(projected_test.T, test_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.6928571428571448"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "err_rate_optimal = 1 - score_optimal\n",
    "err_rate_optimal * 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The error is small with the optimal k-components. It is approximately 2% smaller."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_data = np.concatenate((train, development))\n",
    "lg_optimal = LogisticRegression(fit_intercept=True, C=1000000, penalty='l2',\n",
    "                           solver='lbfgs', multi_class='multinomial')\n",
    "\n",
    "data_labels = np.concatenate((train_labels, development_labels))\n",
    "lg_optimal.fit(raw_data, data_labels)\n",
    "\n",
    "raw_test = test\n",
    "raw_predict = lg_optimal.predict(raw_test)\n",
    "raw_score = lg_optimal.score(raw_test, test_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.6071428571428559"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "err_rate_optimal = 1 - raw_score\n",
    "err_rate_optimal * 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The raw results give a comparable measure than those with the optimal k-components."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
